# Remove all instances from the networks in an idr-environment and reattach
# to an archive network to free up network/router quotas.
# Not production quality, use with care.
#
# Example:
# 1. Disable services:
#      ansible-playbook maintenance/archive-instance-services.yml -e idr_environment=demo3
# 2. Stop servers and move to archived network
#      ansible-playbook maintenance/archive-instance-networks.yml idr_environment=demo3
#
# WARNING:
# - This playbook is not idempotent with regards to instances and ports
# - This playbook requires Ansible 2.2+
# - You should run archive-instance-servers.yml first, otherwise services
#   such as OMERO will attempt to connect to an non-existent IP. If a server
#   is inaccessible then shutdown these services as soon as possible after
#   access is restored.
# - This playbook will first delete all ports on an instance, then add it to
#   the archived network. Due to the way caching works if you run this on an
#   instance that is already on the archive network it'll be disconnected,
#   but won't be reconnected. You will have to re-run this playbook again.

- hosts: localhost

  # TODO: IDR.openstack-idr-network always connects an external network, but
  # we only want an internal router
  roles:
  - role: IDR.openstack-idr-network
    idr_network_name: "{{ archive_network_name }}"
    idr_network_subnet: "{{ archive_network_subnet }}"
    idr_network_external_name: "{{ idr_network_route_external }}"

  tasks:

  - name: Stop servers
    os_server_actions:
      action: stop
      server: "{{ item }}"
    with_items: "{{ groups[ idr_environment + '-hosts'] | default([]) }}"

  - name: Get network ports
    shell: openstack port list --server {{ item }} --format value | cut -d' ' -f1
    register: idr_vm_ports
    check_mode: no
    changed_when: False
    with_items: "{{ groups[ idr_environment + '-hosts'] | default([]) }}"

  - name: Delete network ports
    command: openstack port delete {{ item.stdout }}
    when: "{{ item.stdout | length > 0 }}"
    with_items: "{{ idr_vm_ports.results }}"

  - name: Attach instances to archive network
    include_role:
      name: IDR.openstack-idr-instance-network
    vars:
      idr_instance_network_networks:
      - "{{ archive_network_name }}"
      idr_instance_networks_server_key: id
    with_items:
    - "{{ groups[ idr_environment + '-hosts'] | default([]) }}"
    loop_control:
      loop_var: idr_instance_network_server

  # If this fails you will need to delete it manually
  - name: Delete router
    os_router:
      name: "{{ item }}-router"
      state: absent
    with_items:
    - "{{ idr_environment }}"
    ignore_errors: yes

  # If this fails you will need to delete it manually
  - name: Delete network
    os_network:
      name: "{{ item }}"
      state: absent
    with_items:
    - "{{ idr_environment }}"
    ignore_errors: yes

  vars:
  - archive_network_name: archived
  - archive_network_subnet: "192.168.240.0/24"
