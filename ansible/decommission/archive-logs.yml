# Run this before decommission a deployment

- hosts: >
    {{ idr_environment | default('idr') }}-proxy-hosts
    {{ idr_environment | default('idr') }}-management-hosts
    {{ idr_environment | default('idr') }}-searchengine-hosts

  tasks:
  - name: Get archive prefix
    set_fact:
      decommission_archive_prefix: "{{ ansible_hostname }}-{{ ansible_date_time.date | replace('-', '') }}"

- hosts: "{{ idr_environment | default('idr') }}-proxy-hosts"
  vars:
    logs:
      - { name: 'nginx', path: '/var/log/nginx' }
      - { name: 'haproxy', path: '/var/log/haproxy' }
  tasks:

  - name: Archive proxy logs
    become: yes
    archive:
      dest: /tmp/{{ decommission_archive_prefix }}-{{ item.name }}.tar.gz
      format: gz
      path: "{{ item.path }}"
    register: _decommission_archive_proxy
    with_items: "{{ logs }}"

  - name: Fetch proxy logs archive
    fetch:
      dest: /tmp/
      flat: yes
      src: /tmp/{{ decommission_archive_prefix }}-{{ item.name }}.tar.gz
    with_items: "{{ logs }}"
    when: 'download_dump | default(False)'

  - name: Print archive information
    debug:
      msg: >
        Archived {{ item.archived | length }} files
        from {{ ansible_hostname }}:{{ item.expanded_paths | join(',') }}
    with_items: "{{_decommission_archive_proxy.results}}"

- hosts: "{{ idr_environment | default('idr') }}-management-hosts"
  vars:
    logs:
      # Prometheus service needs to be stopped before archiving the logs
      - { name: 'prometheus', path: '/var/lib/docker/volumes/prometheus-data' }
  tasks:

  - name: Archive managment logs
    become: yes
    archive:
      dest: /tmp/{{ decommission_archive_prefix }}-{{ item.name }}.tar.gz
      format: gz
      path: "{{ item.path }}"
    register: _decommission_archive_management
    with_items: "{{ logs }}"

  - name: Fetch management logs archive
    fetch:
      dest: /tmp/
      flat: yes
      src: /tmp/{{ decommission_archive_prefix }}-{{ item.name }}.tar.gz
    with_items: "{{ logs }}"
    when: 'download_dump | default(False)'

  - name: Print archive information
    debug:
      msg: >
        Archived {{ item.archived | length }} files
        from {{ ansible_hostname }}:{{ item.expanded_paths | join(',') }}
    with_items: "{{_decommission_archive_management.results}}"

- hosts: "{{ idr_environment | default('idr') }}-searchengine-hosts"
  vars:
    logs:
      - { name: 'searchengine', path: '/data/searchengine/searchengine/logs' }
      # We may move archive the searchengine indexed data snapshot to a separate playbook
      - {"name": "searchengine_backup_data/", path: "/searchengine_backup"}
  tasks:

  - name: Archive searchengine logs
    become: yes
    archive:
      dest: /tmp/{{ decommission_archive_prefix }}-{{ item.name }}.tar.gz
      format: gz
      path: "{{ item.path }}"
    register: _searchengine_archive
    with_items: "{{ logs }}"

  - name: Fetch searchengine logs archive
    fetch:
      dest: /tmp/
      flat: yes
      src: /tmp/{{ decommission_archive_prefix }}-{{ item.name }}.tar.gz
    with_items: "{{ logs }}"
    when: 'download_dump | default(False)'

  - name: Print archive information
    debug:
      msg: >
        Archived {{ item.archived | length }} files
        from {{ ansible_hostname }}:{{ item.expanded_paths | join(',') }}
    with_items: "{{_searchengine_archive.results}}"
