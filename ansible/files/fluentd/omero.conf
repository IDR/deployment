# http://fluentular.herokuapp.com/


######################################################################
# Parse multiline log messages of the form
# YYYY-MM-DD hh:mm:ss.mss level [class] (thread) ...
######################################################################
<source>
  @type tail
  path /opt/omero/server/OMERO.server/var/log/*.log,/opt/omero/web/OMERO.web/var/log/*.log

  pos_file /var/log/td-agent/omero.log.pos
  tag raw.omero.*

  format multiline
  format_firstline /^\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2},\d{3}\s+\w+/
  format1 /^(?<time>\d{4}-\d{2}-\d{2} \d{2}:\d{2}:\d{2},\d{3})\s*(?<level>\w+)\s*\[\s*(?<class>[^\]]+)\]\s*\((?<thread>[^\)]+)\)\s*(?<message>.*)/
  time_format %Y-%m-%d %H:%M:%S,%L
  multiline_flush_interval 5s
</source>

# Add filename
# Standardise level: info, warn, error, critical
# Truncate message at 4KB
<filter raw.omero.**>
  @type record_transformer
  enable_ruby
  <record>
    file ${tag_parts[-2]}.${tag_parts[-1]}
    level "${record['level'].downcase.gsub(/^inf.*/i, 'info').downcase.gsub(/^war.*/i, 'warn').gsub(/^err.*/i, 'error').gsub(/^cri.*/i, 'critical').gsub(/^fat.*/i, 'critical')}"
    message "${record['message'][0, 4096] + (record['message'].length > 4096 ? ' ...' : '')}"
  </record>
</filter>

# Add server component to tag
<match raw.omero.**>
  @type rewrite_tag_filter
  <rule>
    key file
    pattern ^(\w+)(-\w+)?\.log$
    tag raw1.omero.$1
  </rule>
</match>


######################################################################
# *.{err,out} logs follow a mix of formats, a datetime is not
# guaranteed
# Assume any line that doesn't start with whitespace is the start of a
# multiline log message
######################################################################
<source>
  @type tail
  path /opt/omero/server/OMERO.server/var/log/*.err,/opt/omero/server/OMERO.server/var/log/*.out

  pos_file /var/log/td-agent/omero.node.pos
  tag raw.omeronode.*

  format multiline
  format_firstline /^\S/
  format1 /^(?<message>.+)/
  multiline_flush_interval 5s
</source>

# Add filename
# Add level: out:info, err:error
# Truncate message at 4KB
<filter raw.omeronode.**>
  @type record_transformer
  enable_ruby
  <record>
    file ${tag_parts[-2]}.${tag_parts[-1]}
    level "${tag_parts[-1].downcase.gsub(/^out.*/i, 'info').downcase.gsub(/^err.*/i, 'error')}"
    message "${record['message'][0, 4096] + (record['message'].length > 4096 ? ' ...' : '')}"
  </record>
</filter>

# Add server node to tag
<match raw.omeronode.**>
  @type rewrite_tag_filter
  <rule>
    key file
    pattern ^(\w+)\.\w+$
    tag raw1.omero.$1
  </rule>
</match>


######################################################################
# Common OMERO log processing
######################################################################

# For debugging only
#<filter **>
#  @type stdout
#</filter>

# Add log level to tag
<match raw1.omero.**>
  @type rewrite_tag_filter
  <rule>
    key level
    pattern (.+)
    tag omero.${tag_parts[2]}.$1
  </rule>
</match>

# Discard debug logs
<filter omero.**>
  @type grep
  <regexp>
    key level
    pattern ^(info|warn|error|critical)
  </regexp>
</filter>

<match omero.**>
  @type relabel
  @label @FORWARD
</match>
