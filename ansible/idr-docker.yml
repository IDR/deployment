# Setup IDR Docker nodes
# Inspired by https://thisendout.com/2016/09/13/deploying-docker-swarm-with-ansible/


- hosts: "{{ idr_environment | default('idr') }}-docker-hosts"

  pre_tasks:
  - name: enable/disable docker swarm
    set_fact:
      docker_swarm_enabled: False

  roles:

  - role: docker
    docker_use_ipv4_nic_mtu: True
  - role: docker-tools

  tasks:

  - name: docker swarm | check active
    become: yes
    shell: "docker info 2> /dev/null | sed -n 's/^Swarm: //p'"
    always_run: yes
    ignore_errors: yes
    register: docker_swarm_active
    changed_when: False


- hosts: "{{ idr_environment | default('idr') }}-dockermanager-hosts"

  pre_tasks:

  - name: docker swarm | get docker host ips
    set_fact:
      docker_host_ips: "{{ groups[idr_environment | default('idr') + '-docker-hosts'] | map('extract', hostvars, 'ansible_' + (idr_net_iface | default('eth0'))) | map(attribute='ipv4') | map(attribute='address') | list }}"

  # Create a list of dicts: http://stackoverflow.com/a/35608380
  # TODO: `no_root_squash` is potentially unsafe but docker requires root
  - name: docker swarm | get docker nfs server config
    set_fact:
      docker_nfs_clients:
        "{{ docker_nfs_clients | default([]) + [ { 'host': item, 'options': 'rw,no_root_squash' } ] }}"
    with_items: docker_host_ips

  - debug:
      msg: "{{ docker_nfs_clients }}"

  roles:

  - role: nfs-share
    nfs_shares: "{{ {'/data': docker_nfs_clients } }}"
    when: docker_swarm_enabled

  tasks:

  - set_fact:
      docker_swarm_manager_ip: "{{ hostvars[groups[idr_environment | default('idr') + '-dockermanager-hosts'][0]]['ansible_' + (idr_net_iface | default('eth0'))]['ipv4']['address']}}"

  - name: docker swarm | initialise
    become: yes
    command: docker swarm init --advertise-addr {{ docker_swarm_manager_ip }}
    when: docker_swarm_active.stdout != 'active' and docker_swarm_enabled

  - name: docker swarm | get worker token
    become: yes
    command: docker swarm join-token worker -q
    register: docker_swarm_worker_token_out
    when: docker_swarm_enabled


  - set_fact:
      docker_swarm_worker_token: "{{ docker_swarm_worker_token_out.stdout }}"
    when: docker_swarm_enabled


- hosts: "{{ idr_environment | default('idr') }}-dockerworker-hosts"

  tasks:

  - name: docker swarm | mount nfs share
    become: yes
    mount:
      fstype: nfs4
      name: "/data"
      opts: rsize=8192,wsize=8192,timeo=14,intr,rw
      src: "{{ manager_ip }}:/data"
      state: mounted

  - name: docker swarm | join worker
    become: yes
    command: docker swarm join --token {{ token }} {{ manager_ip }}
    when: docker_swarm_active.stdout != 'active'

  vars:
    token: "{{ hostvars[groups[idr_environment | default('idr') + '-dockermanager-hosts'][0]]['docker_swarm_worker_token'] }}"
    manager_ip: "{{ hostvars[groups[idr_environment | default('idr') + '-dockermanager-hosts'][0]]['docker_swarm_manager_ip'] }}"


- hosts: "{{ idr_environment | default('idr') }}-dockermanager-hosts"

  tasks:

  - name: docker swarm | start jupyter
    become: yes
    docker_service:
      project_name: omero-jupyter
      state: present
      definition:
        version: "2"
        volumes:
          jupyter-notebooks:
        services:
          jupyter:
            image: manics/jupyter-docker
            ports:
            - "8888:8888"
            volumes:
            - jupyter-notebooks:/notebooks
