# configure and run Elasticsearch for the searchengine

- name: Deploying search engine
  hosts: "{{ idr_environment | default('idr') }}-searchengine-hosts"
  vars:
    elasticsearch_nodes: [ ]
    instances_nodes: []
    instances: {}

  tasks:

  - name: Change the ownership of the Elatsicsearch backup
    become: yes
    file:
      path: "{{ elasticsearch_backup_folder }}"
      owner: 1000
      group: root
      state: directory

  - name: Create app top level directory
    become: yes
    file:
      path: "{{ apps_folder }}/searchengine"
      recurse: yes
      state: directory
      owner: root
      group: root
      mode: 0755

  - name: Create elasticsearch directory
    become: yes
    file:
      path: "{{ apps_folder }}/searchengine/elasticsearch"
      state: directory
      # User id in elasticsearch Docker image
      owner: 1000
      group: root
      mode: 0755

  - name: Create elasticsearch certs folder
    become: yes
    file:
      path: "{{ apps_folder }}/searchengine/elasticsearch/certs"
      state: directory
      # User id in elasticsearch Docker image
      owner: 1000
      group: root
      mode: 0755


  - name: Create elasticsearch main nodes directories
    become: yes
    file:
      path: "{{ apps_folder }}/searchengine/elasticsearch/node{{ item }}"
      state: directory
      # User id in elasticsearch Docker image
      owner: 1000
      group: root
      mode: 0755
    with_sequence: start=1 count={{ elasticsearch_no_nodes }}

  - name: Create elasticsearch logs directory
    become: yes
    file:
      path: "{{ apps_folder }}/searchengine/elasticsearch/node{{ item }}/logs"
      state: directory
      # User id in elasticsearch Docker image
      owner: 1000
      group: root
      mode: 0755
    with_sequence: start=1 count={{ elasticsearch_no_nodes }}

  - name: Create elasticsearch data directory
    become: yes
    file:
      path: "{{ apps_folder }}/searchengine/elasticsearch/node{{ item }}/data"
      state: directory
      # User id in elasticsearch Docker image
      owner: 1000
      group: root
      mode: 0755
    with_sequence: start=1 count={{ elasticsearch_no_nodes }}

  - name: Add elastic nodes to instances_nodes
    set_fact:
      instances_nodes: "{{instances_nodes + [( {'name' : 'searchengine_elasticsearch_node'+item, 'dns': ['searchengine_elasticsearch_node'+item,'localhost'],'ip': '127.0.0.1'})] }}"

    with_sequence: start=1 count={{ elasticsearch_no_nodes }}


  - name: Add elastic nodes to instances
    set_fact:
      instances: "{{instances | combine ( {'instances' : instances_nodes}) }}"


  #Add all elasticsearch nodes
  - name: Add elastic nodes to elasticsearch_nodes
    set_fact:
      elasticsearch_nodes: '{{ elasticsearch_nodes + ["searchengine_elasticsearch_node"+item] }}'
    with_sequence: start=1 count={{ elasticsearch_no_nodes }}

  - name: Create docker network
    become: yes
    docker_network:
      name: searchengine-net
      ipam_config:
        - subnet=10.11.0.0/16

  # I got some memory exceptions when start using elasticsearch cluster and
  # increasing the mmap counts limits fix this issue
  #https://www.elastic.co/guide/en/elasticsearch/reference/7.16 /vm-max-map-count.html
  - name: set vm.max_map_count to 262144 in sysctl
    become: yes
    sysctl: name={{ item.varname }} value={{ item.varvalue }}
    with_items:
      - { varname: "vm.max_map_count", varvalue: "262144" }

  - name: create CA
    become: yes
    docker_container:
      image: "{{ search_engineelasticsearch_docker_image }}"
      name: "creat_ca_for_elasticsearch_cluster"
      cleanup: True
      command:  "bash -c '/usr/share/elasticsearch/bin/elasticsearch-certutil ca -s  -out /usr/share/elasticsearch/config/certificates/elastic-ca.p12 --pass {{ ca_password }}
         '"
          #fi;
      state: started
      volumes:
          - "{{ apps_folder }}/searchengine/elasticsearch/certs:/certs"
          - "{{ apps_folder }}/searchengine/elasticsearch/certs:/usr/share/elasticsearch/config/certificates"

  - name: Wait for CA file
    ansible.builtin.wait_for:
      path: "{{ apps_folder }}/searchengine/elasticsearch/certs/elastic-ca.p12"
      state: present
    register: check_ca_file_result

  - name: Show wait CA file result
    debug:
      var: check_ca_file_result

  - copy:
        dest: /tmp/instances.yaml
        content: |
          {{ instances   |to_nice_yaml }}



  - name: Create nodes' cert
    become: yes
    docker_container:
      image: "{{ search_engineelasticsearch_docker_image }}"
      name: "creat_ca_for_elasticsearch_cluster"
      cleanup: True
      command:  "bash -c 'bin/elasticsearch-certutil cert --ca /usr/share/elasticsearch/config/certificates/elastic-ca.p12 --ca-pass {{ ca_password }}  --pass {{ keystore_password }}  --in /tmp/instances.yaml -out /usr/share/elasticsearch/config/certificates/bundle.zip;
      echo 'done';
      unzip /usr/share/elasticsearch/config/certificates/bundle.zip -d /usr/share/elasticsearch/config/certificates/;
         '"

      state: started
      volumes:
          - "{{ apps_folder }}/searchengine/elasticsearch/certs:/certs"
          - "{{ apps_folder }}/searchengine/elasticsearch/certs:/usr/share/elasticsearch/config/certificates"
          - /tmp/instances.yaml:/tmp/instances.yaml



  - name: Run first docker elasticsearch main node
    become: yes
    docker_container:
      image: "{{ search_engineelasticsearch_docker_image }}"
      name: "searchengine_elasticsearch_node1"
      cleanup: True
      ulimits:
        - 'memlock:-1:-1'
      env:
        path.data: "/var/lib/elasticsearch"
        path.logs: "/var/log/elasticsearch"
        path.repo: "{{ elasticsearch_backup_folder }}"
        node.name: searchengine_elasticsearch_node1
        bootstrap.memory_lock: "true"
        network.host: 0.0.0.0
        cluster.name: "searchengine-cluster"
        cluster.initial_master_nodes: "{{ elasticsearch_nodes | join(',') }}"
        http.host: 0.0.0.0
        #http.port: 9200
        ES_JAVA_OPTS: "-Xms2g -Xmx2g"
        ingest.geoip.downloader.enabled: "false"
        ########################################
        es_api_basic_auth_username: "elastic"
        ELASTIC_PASSWORD: "{{ ELASTIC_PASSWORD }}"
        es_validate_certs: "no"
        es_enable_http_ssl: "true"
        xpack.security.http.ssl.enabled: "true"
        xpack.security.enabled: "true"
        xpack.security.authc.realms.file.file1.order: "0"
        xpack.security.authc.realms.native.native1.order: "1"
        xpack.security.http.ssl.keystore.path: "/usr/share/elasticsearch/config/certificates/elastic-ca.p12"
        xpack.security.http.ssl.truststore.password: "{{ ca_password }}"
        xpack.security.http.ssl.keystore.password: "{{ ca_password }}"
        xpack.security.transport.ssl.enabled: "true"
        xpack.security.transport.ssl.verification_mode: "certificate"
        xpack.security.transport.ssl.keystore.path: "/usr/share/elasticsearch/config/certificates/searchengine_elasticsearch_node1/searchengine_elasticsearch_node1.p12"
        xpack.security.transport.ssl.truststore.path: "/usr/share/elasticsearch/config/certificates/searchengine_elasticsearch_node1/searchengine_elasticsearch_node1.p12"
        xpack.security.transport.ssl.keystore.password: "{{ keystore_password }}"
        xpack.security.transport.ssl.truststore.password: "{{ keystore_password }}"
      #########################################################################
      networks:
      - name: "searchengine-net"
        ipv4_address: 10.11.0.2
      published_ports:
        - "9201:9200"
        - "9301:9300"
      state: started
      restart_policy: always
      volumes:
      - "{{ apps_folder }}/searchengine/elasticsearch/node1/data:/var/lib/elasticsearch"
      - "{{ apps_folder }}/searchengine/elasticsearch/node1/logs:/var/log/elasticsearch"
      - "{{ apps_folder }}/searchengine/elasticsearch/certs:/usr/share/elasticsearch/config/certificates"
      - "{{ elasticsearch_backup_folder }}:{{ elasticsearch_backup_folder }}"


  - name: Run docker elasticsearch for the remaining nodes
    become: yes
    docker_container:
      image: "{{ search_engineelasticsearch_docker_image }}"
      name: "searchengine_elasticsearch_node{{ item }}"
      ulimits:
        - 'memlock:-1:-1'
      cleanup: True
      env:
        path.data: "/var/lib/elasticsearch"
        path.logs: "/var/log/elasticsearch"
        path.repo: "{{ elasticsearch_backup_folder }}"
        node.name: "searchengine_elasticsearch_node{{ item }}"
        bootstrap.memory_lock: "true"
        network.host: 0.0.0.0
        cluster.name: "searchengine-cluster"
        discovery.seed_hosts: "searchengine_elasticsearch_node1"
        cluster.initial_master_nodes: "{{ elasticsearch_nodes | join(',') }}"
        http.host: 0.0.0.0
        #http.port: 9200
        ES_JAVA_OPTS: "-Xms1g -Xmx1g"
        ingest.geoip.downloader.enabled: "false"
        ####################################################################
        es_api_basic_auth_username: "elastic"
        ELASTIC_PASSWORD: "{{ ELASTIC_PASSWORD }}"
        es_validate_certs: "no"
        es_enable_http_ssl: "true"
        xpack.security.http.ssl.enabled: "true"
        xpack.security.enabled: "true"
        xpack.security.authc.realms.file.file1.order: "0"
        xpack.security.authc.realms.native.native1.order: "1"
        xpack.security.http.ssl.keystore.path: "/usr/share/elasticsearch/config/certificates/elastic-ca.p12"
        xpack.security.http.ssl.truststore.password: "{{ ca_password }}"
        xpack.security.http.ssl.keystore.password: "{{ ca_password }}"
        xpack.security.transport.ssl.enabled: "true"
        xpack.security.transport.ssl.verification_mode: "certificate"
        xpack.security.transport.ssl.keystore.path: "/usr/share/elasticsearch/config/certificates/searchengine_elasticsearch_node{{ item }}/searchengine_elasticsearch_node{{ item }}.p12"
        xpack.security.transport.ssl.truststore.path: "/usr/share/elasticsearch/config/certificates/searchengine_elasticsearch_node{{ item }}/searchengine_elasticsearch_node{{ item }}.p12"
        xpack.security.transport.ssl.keystore.password: "{{ keystore_password }}"
        xpack.security.transport.ssl.truststore.password: "{{ keystore_password }}"
        ####################################################################

      networks:
      - name: "searchengine-net"
        ipv4_address: 10.11.0.{{ item | int + 1 }}
      published_ports:
        - "920{{ item }}:9200"
        - "930{{ item }}:9300"
      state: started
      restart_policy: always
      volumes:
      - "{{ apps_folder }}/searchengine/elasticsearch/node{{ item }}/data:/var/lib/elasticsearch"
      - "{{ apps_folder }}/searchengine/elasticsearch/node{{ item }}/logs:/var/log/elasticsearch"
      - "{{ elasticsearch_backup_folder }}:{{ elasticsearch_backup_folder }}"
      - "{{ apps_folder }}/searchengine/elasticsearch/certs:/usr/share/elasticsearch/config/certificates"
    with_sequence: start=2 count={{ elasticsearch_no_nodes | int -1 }}
