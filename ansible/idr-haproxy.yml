# Setup the IDR haproxy for non-web requests
#
# We can't do proper session pinning with the OMERO binary protocol because
# there's no way to insert or extract an identifier, so we have to use
# the client IP. If there are multiple clients behind the same IP such as
# Jupyterhub this means they'll all hit the same backend server.
#
# To get around this create multiple front-end ports with identical
# backend configuration. If clients connect to a random port the client
# IP will only be pinned for that front-end port.
#
# This should give us the benefit of haproxy's load-balancing whilst
# distributing clients from the same IP.
#
# To support autoconfiguration of clients we also create a json config
# file with a list of connections parameters that clients should randomly
# choose from.


# Load hostvars (production OMERO)
- hosts: >
    {{ idr_environment | default('idr') }}-omeroreadonly-hosts


- hosts: "{{ idr_environment | default('idr') }}-proxy-hosts"

  pre_tasks:

  - name: Get omero IP
    set_fact:
      omero_omeroreadonly_hosts: >-
        {{
          groups[idr_environment | default('idr') + '-omeroreadonly-hosts'] |
          map('extract', hostvars,
            ['ansible_' + (idr_net_iface | default('eth0')), 'ipv4', 'address']) | sort
        }}

  # https://stackoverflow.com/a/35608380
  # TODO: Find a nicer way to do this instead of a set_fact loop
  - name: Get haproxy backend server list
    set_fact:
      omero_haproxy_backend_omeroreadonly: >
        {{ omero_haproxy_backend_omeroreadonly | default([]) +
           [{
             'name': 'omero4064-' + (item | regex_replace('\.', '_')),
             'address': item + ':4064'
            }]
        }}
    with_items:
    - "{{ omero_omeroreadonly_hosts }}"

  # TODO: Find a nicer way to do this instead of a set_fact loop
  - name: haproxy duplicate frontend ports
    set_fact:
      omero_haproxy_frontend_omero_multiple: >
        {{ omero_haproxy_frontend_omero_multiple | default([]) +
           [{
             'name': 'omero4064-' + item,
             'address': '*:' + (omero_haproxy_frontend_omero_offset + item | int) | string,
             'mode': 'tcp',
             'backend': 'omero4064',
             'timeout_client': '10m',
             'options': ['tcplog']
            }]
        }}
      omero_haproxy_frontend_omero_multiple_conn: >
        {{ omero_haproxy_frontend_omero_multiple_conn | default([]) +
           [{
             'host': omero_haproxy_frontend_omero_host,
             'port': (omero_haproxy_frontend_omero_offset + item | int)
            }]
        }}
    with_sequence: start=0 count=10


  roles:
  - openmicroscopy.selinux-utils
  - openmicroscopy.haproxy

  tasks:

  - name: Create client autoconfiguration directory
    become: yes
    file:
      path: /srv/www/connection
      recurse: yes
      state: directory

  - name: Create client autoconfiguration file
    become: yes
    copy:
      content: "{{ omero_haproxy_frontend_omero_multiple_conn | to_nice_json }}"
      dest: "/srv/www/connection/omero-connection.json"

  vars:

    omero_haproxy_frontend_omero_offset: 14060
    omero_haproxy_frontend_omero_host: idr.openmicroscopy.org

    # haproxy needs some special setup to log to a file
    haproxy_syslog_configure_udp: True
    haproxy_syslog_dest: local2

    haproxy_frontends: "{{ omero_haproxy_frontend_omero_multiple }}"

    haproxy_backends:
    - name: omero4064
      mode: tcp
      balance_method: source
      servers: "{{ omero_haproxy_backend_omeroreadonly }}"
      timeout_connect: 10s
      timeout_server: 10m
      options:
      - tcplog
