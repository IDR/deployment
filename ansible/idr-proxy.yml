# Setup the IDR web proxy
#
# This must be run after all other IDR services are installed, as we need the
# full list of backend services to be proxied

# Load hostvars (production OMERO)
- hosts: >
    {{ idr_environment | default('idr') }}-omero-hosts

# Load hostvars (jupyter), this should be the proxy idr_environment
# suffixed with `-a`
- hosts: >
    {{ idr_environment | default('idr') }}-dockermanager-hosts


- hosts: "{{ idr_environment | default('idr') }}-proxy-hosts"
  roles:
  - openmicroscopy.selinux-utils

- hosts: "{{ idr_environment | default('idr') }}-proxy-hosts"

  pre_tasks:

  - name: Get omero IP
    set_fact:
      omero_omeroreadonly_hosts: >-
        {{
          groups[idr_environment | default('idr') + '-omeroreadonly-hosts'] |
          map('extract', hostvars,
            ['ansible_' + (idr_net_iface | default('eth0')), 'ipv4', 'address']) | list
        }}
      omero_omeroreadwrite_hosts: >-
        {{
          groups[idr_environment | default('idr') + '-omeroreadwrite-hosts'] |
          map('extract', hostvars,
            ['ansible_' + (idr_net_iface | default('eth0')), 'ipv4', 'address']) | list
        }}

  - name: Get rsync IP
    # TODO: get all readonly
    set_fact:
      omero_downloads_host_ansible: >-
        {{
          hostvars[groups[
            idr_environment | default('idr') + '-omero-hosts'][0]]
            ['ansible_' + (idr_net_iface | default('eth0'))]['ipv4']['address']
        }}
    when: "{{ groups[idr_environment | default('idr') + '-omero-hosts'] is defined }}"

  - name: Get docker services IP
    # TODO: get all?
    set_fact:
      # Optional, so that it can run in an environment where there's only
      # an OMERO server but no analysis platform
      docker_services_host_ansible: >-
        {{
          hostvars[groups[
            idr_environment | default('idr') + '-dockermanager-hosts'][0]]
            ['ansible_' + (idr_net_iface | default('eth0'))]['ipv4']['address']
        }}
    when: "{{ groups[idr_environment | default('idr') + '-dockermanager-hosts'] is defined }}"

  - name: Configure rsync port in selinux
    become: yes
    seport:
      ports: 873
      proto: tcp
      setype: http_port_t
      state: present
    when: selinux_enabled

  roles:
  # Default to a self-signed certificate, to use production certificates set:
  # idr_nginx_ssl_production: True
  # nginx_proxy_ssl_certificate_source_path: local/path/to/certificate
  # nginx_proxy_ssl_certificate_key_source_path: local/path/to/key
  - role: openmicroscopy.nginx-ssl-selfsigned
    nginx_ssl_certificate: "{{ nginx_proxy_ssl_certificate }}"
    nginx_ssl_certificate_key: "{{ nginx_proxy_ssl_certificate_key }}"
    when: "{{ not idr_nginx_ssl_production | default(False) | bool }}"
  - role: openmicroscopy.nginx-proxy


# Playbook for setting up the IDR static website pages
- hosts: "{{ idr_environment | default('idr') }}-proxy-hosts"

  pre_tasks:

  # This seems complicated because the config file needs to exist before
  # jekyll-build, but we also want to notify jekyll-build of changes which
  # can't be done until after the jekyll-build role

  - name: create jekyll config directory
    become: yes
    file:
      path: "{{ jekyll_build_config.0 | dirname }}"
      recurse: yes
      state: directory

  - name: create dummy jekyll config
    become: yes
    copy:
      content: ''
      dest: "{{ jekyll_build_config.0 }}"
      # Only create if it doesn't exist
      force: no

  roles:
  - role: openmicroscopy.jekyll-build

  tasks:
  - name: create jekyll config
    become: yes
    copy:
      content: "{{ idr_openmicroscopy_org_config | to_nice_yaml }}"
      dest: "{{ jekyll_build_config.0 }}"
      force: yes
    notify:
    - jekyll build
