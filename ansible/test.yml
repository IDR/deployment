---
# Playbook for testing individual and sets of roles.
#
# Host names in this file should match the name of the Vagrant configuration
# in Vagrantfile. Tests can be run either by using `vagrant up $NAME` when a
# box does not yet exist, or `vagrant provision $NAME` for one that exists &
# is running.

- hosts: docker
  roles:
  - role: docker
  - role: docker-tools

- hosts: redis
  roles:
  - role: redis

- hosts: samba
  roles:
  - role: active-directory-samba-share
    active_directory_realm: AD.EXAMPLE.ORG
    active_directory_workgroup: workgroup
    active_directory_shares:
      share-ro:
        path: /srv/samba/ro
        comment: Read-only share
        users: [root]

      share-rw:
        path: /srv/samba/rw
        comment: Read-write share
        readonly: False
        users: [root]

- hosts: cliutils
  roles:
  - role: cli-utils
    # Should automatically bring in basedeps

- hosts: postgres
  roles:
  - postgresql
  vars:
  - postgresql_server_listen: "'*'"
  - postgresql_server_auth:
    - database: publicdb
      user: alice123
      address: 192.168.1.0/24
  - postgresql_users_databases:
    - user: alice
      password: alice123
      databases: [publicdb, secretdb]
    - user: bob
      password: bob123
      databases: [publicdb]
      roles: "CREATEDB,NOSUPERUSER"

  # Testing

  tasks:
  - command: psql postgres -c "SELECT * FROM pg_roles WHERE rolname='alice'" -At
    become: yes
    become_user: postgres
    register: pg_alice

  - command: psql postgres -c "SELECT * FROM pg_roles WHERE rolname='bob'" -At
    become: yes
    become_user: postgres
    register: pg_bob

  - assert:
      that:
      # Everything except the UID
      - "pg_alice.stdout.startswith('alice|f|t|f|f|f|t|f|-1|********|||')"
      - "pg_bob.stdout.startswith('bob|f|t|f|t|f|t|f|-1|********|||')"
