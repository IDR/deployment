---
# Playbook for testing individual and sets of roles.
#
# Host names in this file should match the name of the Vagrant configuration
# in Vagrantfile. Tests can be run either by using `vagrant up $NAME` when a
# box does not yet exist, or `vagrant provision $NAME` for one that exists &
# is running.

- hosts: docker
  roles:
  - role: docker
  - role: docker-tools

- hosts: redis
  roles:
  - role: redis

- hosts: samba
  roles:
  - role: active-directory-samba-share
    active_directory_realm: AD.EXAMPLE.ORG
    active_directory_workgroup: workgroup
    active_directory_shares:
      share-ro:
        path: /srv/samba/ro
        comment: Read-only share
        users: [root]

      share-rw:
        path: /srv/samba/rw
        comment: Read-write share
        readonly: False
        users: [root]

- hosts: cliutils
  roles:
  - role: cli-utils
    # Should automatically bring in basedeps

- hosts: postgres
  roles:
  - postgresql
  vars:
  - postgresql_server_listen: "'*'"
  - postgresql_server_auth:
    - database: publicdb
      user: alice123
      address: 192.168.1.0/24
  - postgresql_users_databases:
    - user: alice
      password: alice123
      databases: [publicdb, secretdb]
    - user: bob
      password: bob123
      databases: [publicdb]
      roles: "CREATEDB,NOSUPERUSER"

  # Testing

  tasks:
  - command: psql postgres -c "SELECT * FROM pg_roles WHERE rolname='alice'" -At
    become: yes
    become_user: postgres
    register: pg_alice

  - command: psql postgres -c "SELECT * FROM pg_roles WHERE rolname='bob'" -At
    become: yes
    become_user: postgres
    register: pg_bob

  - assert:
      that:
      # Everything except the UID
      - "pg_alice.stdout.startswith('alice|f|t|f|f|f|t|f|-1|********|||')"
      - "pg_bob.stdout.startswith('bob|f|t|f|t|f|t|f|-1|********|||')"

- hosts: selinux
  roles:
  - selinux-utils
  tasks:
  - assert:
      # This assumes we're testing on the centos-7 Vagrantbox which has
      # selinux enabled. Use `is sameas` to also assert type
      that: "{{ selinux_enabled is sameas True }}"

- hosts: docs
  roles:
  - role: sphinx-build

  tasks:
  - command: sphinx-build --version
    register: sphinx_version

  - assert:
      that:
      - "sphinx_version.stdout == 'Sphinx (sphinx-build) 1.2.3'"

- hosts: jupyter
  roles:
  - role: docker
  - role: docker-tools
  - role: idr-jupyter
    idr_jupyter_ip: "{{ ansible_eth0.ipv4.address }}"
    # `user` must exist in the jupyterhub Docker container
    idr_jupyter_users: [user]
    idr_jupyter_admins: [user]
    idr_jupyter_notebook_volumes: "{ '/notebooks/{username}': '/notebooks' }"
    idr_jupyter_hub_extra_docker_args: "-e USER_PASSWORD=ome"
  tasks:
  - become: yes
    file:
      path: "/notebooks/user"
      owner: 1000
      state: directory
  # Setup a port-forward to 8000 and you should be able to login as
  # user:user password:ome
